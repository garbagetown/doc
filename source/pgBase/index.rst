==============
1. ソースコード管理の流れ
==============

PG・UT中のソースコード管理の流れを以下に記載します。

.. image:: img/all.png

使用技術
====

- バージョン管理はGit / GitBucketを使用します。
- ビルドツールおよびライブラリ管理はmaven / Artifactoryを使用します。
- CIはJenkinsを使用します。
- ソースコードの品質監視にはSonarQubeを使用します。

ソースコード管理の流れ
-----------

1. 開発PCにてソースコードを変更し、gitにてバージョン管理を行います。
2. 開発者はソースコードをGitBucketにpushし、GitBucketにてソースコードのバージョン管理を行います。
3. **Jenkins** はGitBucketから最新のソースコードを取得し、アプリケーションが常に動作する状態か監視します。
4. Jenkinsと **SonarQube** が連携されており、ソースコードの品質を常に監視しています。
5. Jenkinsから各モジュールをライブラリ(jar)として **Artifactory** に格納することで、開発者は最新のモジュールを取得することが出来ます。

.. note::

  * Jenkinsはテスト・ビルドを実行します。
  * Jenkinsにて監視しているのはmasterブランチとdevelopブランチです。
  * SonarQubeはソースコードの複雑度の計測やコーディングチェックなどを行い、視覚化します。
  * SonarQubeにて監視しているのはmasterブランチとdevelopブランチです。
  * Artifactoryはjarをライブラリとして管理することが出来ます。
  * アーキチームやDBAの管理ソースは、ライブラリ(jar)として提供されます。

Gitについて
=======

| Gitの使用方法を以下ドキュメントに記載します。
| コミットコメントやレビュー方法についても記載しているので、目を通してください。
|

*  :doc:`Git/index`
